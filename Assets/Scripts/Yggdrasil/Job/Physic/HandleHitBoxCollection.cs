using System;
using UnityEngine;
using Yggdrasil.Core.Controller;
using Yggdrasil.Core.Job;
using Yggdrasil.Data.Physic.HitBox;

namespace Yggdrasil.Job.Physic
{
    /**
     * <summary>
     * Handle the hit generated by hit box collection.
     * </summary>
     */
    [Serializable]
    public class HandleHitBoxCollection : IGizmosJob, IStartableJob
    {
        # region Properties

        /**
         * <summary>
         * A reference to the hit box collection data
         * </summary>
         */
        private HitBoxCollection _data = null;

        /**
         * <summary>
         * A reference to the controller
         * </summary>
         */
        private MonoController _controller = null;

        /**
         * <summary>
         * A reference to the game object transform.
         * </summary>
         */
        private Transform _transform = null;

        # endregion

        # region PropertyAccessors

        /**
         * <inheritdoc/>
         */
        public JobMethod Method { get => JobMethod.FixedUpdate; }

        # endregion

        # region PublicMethods

        /**
         * <inheritdoc/>
         */
        public void Init(MonoController controller)
        {
            _controller = controller;
            _data       = controller.GetData<HitBoxCollection>();
            _transform  = controller.gameObject.transform;
        }

        /**
         * <inheritdoc/>
         */
        public void Handle()
        {
            if (!_data.Hit.requestHit)
                return;

            HitBox hit     = _data.Hit;
            hit.requestHit = false;
            Vector2 center = new Vector2(
                _transform.position.x + hit.offsetX,
                _transform.position.y + hit.offsetY
            );
            Collider2D[] colliders = Physics2D.OverlapCircleAll(
                center,
                hit.radius,
                _data.layer
            );

            foreach (Collider2D collider in colliders)
            {
                MonoController controller = collider.GetComponent<MonoController>();

                if (null == controller)
                {
                    Debug.LogWarning($"The {collider.gameObject.name} does not have a MonoController");

                    continue;
                }

                hit.onHit.Invoke(_controller, controller);
            }
        }

        /**
         * <inheritdoc/>
         */
        public void Start()
        {
        }

        /**
         * <inheritdoc/>
         */
        public void Stop()
        {
            _data.boxes.ForEach(b => { b.onHit.RemoveAllListeners(); });
        }

        /**
         * <inheritdoc/>
         */
        public void DrawGizmos(MonoController controller)
        {
        }

        /**
         * <inheritdoc/>
         */
        public void DrawGizmosSelected(MonoController controller)
        {
            HitBoxCollection data = controller.GetData<HitBoxCollection>();
            Vector3 position = controller.gameObject.transform.position;

            data
                .boxes
                .FindAll(b => b.debug)
                .ForEach(b => {
                    Gizmos.color = b.color;

                    Vector3 center = new Vector3(
                        position.x + b.offsetX,
                        position.y + b.offsetY,
                        position.z
                    );

                    Gizmos.DrawWireSphere(center, b.radius);
                })
            ;
        }

        /**
         * <summary>
         * Request a hit
         * </summary>
         */
        public void RequestHit()
        {
            ResetHits();

            _data.index += 1;

            if (_data.index > _data.boxes.Count)
                _data.index = _data.boxes.Count - 1;

            _data.Hit.requestHit = true;
        }

        /**
         * <summary>
         * Reset all hit
         * </summary>
         */
        public void Reset()
        {
            ResetHits();

            _data.index = 0;
        }

        # endregion

        # region PrivateMethods

        /**
         * <summary>
         * Reset all boxes
         * </summary>
         */
        private void ResetHits()
        {
            _data.boxes.ForEach(b => { b.requestHit = false; });
        }

        # endregion
    }
}
